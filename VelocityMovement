using System.Collections;
using System.Collections.Generic;
using UnityEngine;

//Need to fix Jump Run
//need to fix 2nd jump
public class Velocity : MonoBehaviour
{
    //this is for the SphereCast it will create a sphere under the player to check if it touches anything 
    public LayerMask groundLayerMask;

    //we will use this for the Raycast on walls to wall run
    public LayerMask wallLayerMask;

    //Checks if the player is in certain conditions
    public bool IsGrounded;
    public bool onWall;
    public bool isRunning;
    public bool isWallRunning;
    //the speed and movement direction of the player
    public float walkingSpeed = 5;
    public float runningSpeed = 10;
    public float wallRunningSpeed = 7.5f;
    private float moveNS;
    private float moveEW;
    //takes the rigid component of an object
    private Rigidbody rb;

    //the force of the players jump
    public float jumpForce = 6.5f;
    public float airjumpForce = 5f;

    //Can the player air jump?
    public bool airJump;


    //we save the directions the player move at so we can change their speed
    Vector3 movedirection;
    //happens before the first frame
    private void Awake()
    {
        //we take in the rigidbody compnent of the player
        rb = GetComponent<Rigidbody>();
    }

    // Start is called before the first frame update
    void Start()
    {

    }

    // Update is called once per frame
    void Update()
    {
        //the input value of the x and z axises
        moveNS = Input.GetAxisRaw("Horizontal");
        moveEW = Input.GetAxisRaw("Vertical");
        //we now make a vector of where the player can move to and normalize it, which means it can go from 0 to 1
        movedirection = (moveNS * transform.right + moveEW * transform.forward).normalized;

        if (IsGrounded)
        {
            airJump = true;

        }

        if (transform.position.y < -2) // where -10 is the lowest the player can fall before reset
        {
            transform.position = Vector3.zero; // same as new Vector3(0, 0, 0);
            GetComponent<Rigidbody>().velocity = Vector3.zero;
        }

        //is jumping
        jump();

    }
    //Called every physics update
    private void FixedUpdate()
    {
        //checks whether the gameobject is grounded or not
        IsGrounded = Grounded();
        onWall = againstWall();
        //activates movement
        Movement();
    }

    //In movement() and jump() I have not made it to the players movement are limited when jumping, may want to add it later
    public void Movement()
    {
        //We save the previous y velocity of the player, we need this so the players y velocity doesn't always reset to 0 and stops physics acting weird
        //to change how fast the player falls we need to go to edit  -> Project Settings -> Gravity and change the "- value"
        Vector3 yFallVect = new Vector3(0, rb.velocity.y, 0);


        if((isWallRunning == true && onWall == false) || (!Input.GetButton("Vertical") && !Input.GetButton("Horizontal") && !Input.GetButton("Jump")))
        {
            
            isWallRunning = false;
            rb.useGravity = true;
        }

        //Checks whether the object is grounded and if no inputs are given, basically not moving 
        if ((IsGrounded == true && !Input.GetButton("Vertical") && !Input.GetButton("Horizontal") && !Input.GetButton("Jump")))
        {
            rb.useGravity = true;
            //if player does not move change the vector to 0     
            rb.velocity = Vector3.zero + yFallVect;
            isRunning = false;
            Debug.Log("stopping");
        }

        //Running input
        else if (Input.GetKey(KeyCode.W) && Input.GetKey(KeyCode.LeftShift) && !Input.GetButtonDown("Jump"))
        {


            //wall Run
            if (onWall == true && IsGrounded == false)
            {

                Debug.Log("WallRunning");
                rb.velocity = movedirection * wallRunningSpeed;
                rb.useGravity = false;
                isWallRunning = true;
            }

            //running
            else if (IsGrounded == true)
            {
                Debug.Log("Running");
                rb.useGravity = true;
                //the velocity of the players direction and resetting y to the players y previous value so it doesnt glitch
                rb.velocity = movedirection * runningSpeed + yFallVect;
                isRunning = true;

            }


        }

        //Walking input
        //Added not jumping so while we moving forward as the button first gets pressed down at least it can perform a jump
        else if ((Input.GetButton("Vertical") || Input.GetButton("Horizontal")) && !Input.GetButtonDown("Jump") && IsGrounded == true)
        {


            Debug.Log("Walking");
            //Adds force relative to the rotation of object
            rb.velocity = movedirection * walkingSpeed + yFallVect;
            rb.useGravity = true;
            //player is not running anymore
            isRunning = false;

        }



    }

    private void jump()
    {

        //checks if player is grounded if so it can do part one of the jump
        if (IsGrounded == true && Input.GetButtonDown("Jump"))
        {

            Debug.Log("GroundJumping");
            //force of the jump
            //rb.AddForce(0f, jumpForce, 0f, ForceMode.Acceleration);
            rb.velocity = new Vector3(0f, jumpForce, 0f);



        }

        //if no more grounded and still has an airjump the player can jump again
        else if (!IsGrounded && airJump == true && Input.GetButtonDown("Jump"))
        {
            Debug.Log("Air Jump");
            //force of the jump
            if (rb.velocity.y < 0f)
            {
                
                //can use both force or velocity but velocity goes against gravity {Kind of resets its downward force}
                rb.velocity = new Vector3(0f, airjumpForce, 0f);
                //rb.AddForce(0f, jumpForce ,0f);
                airJump = false;
            }
            else
            {

                rb.velocity = rb.velocity + new Vector3(0f, airjumpForce, 0f);
                //rb.AddForce(0f, jumpForce, 0f);
                airJump = false;
            }



        }

        

        //if the player is run jumping then we do this
        if (IsGrounded == false && isRunning == true && Input.GetButton("Horizontal") && Input.GetButton("Vertical"))
        {
            Vector3 yFallVect = new Vector3(0, rb.velocity.y, 0);
            //the velocity of the players direction and resetting y to the players y previous value so it doesnt glitch
            rb.velocity = movedirection * runningSpeed + yFallVect;
            Debug.Log("AirRunning");
        }

        //if player is only walk jumping then do this
        else if (IsGrounded == false && isRunning == false && Input.GetButton("Horizontal") && Input.GetButton("Vertical"))
        {
            Vector3 yFallVect = new Vector3(0, rb.velocity.y, 0);
            rb.velocity = movedirection * walkingSpeed + yFallVect;
            Debug.Log("AirWalking");
        }

    }



    private bool Grounded()
    {
        //Stores the value of what the raycast has hit
        RaycastHit hit;

        //if the return value is true then it returns true
        //basically creates a sphrere to check beneath it
        //transorm position takes in the position of set object
        //GetComponentInChildren takes the component we ask for of any children
        //0.55f and 0.49f are: one of them moves where the spheres is and the other sets the radius of the sphere outside of the hitbox which stops character from being grounded 1m high
        //then vector3.down checks downwards
        //and groundlayermask is the layer which is the floor
        return Physics.SphereCast(transform.position + GetComponentInChildren<CapsuleCollider>().center, 0.55f, Vector3.down, out hit, 0.49f, groundLayerMask);
    }

    private bool againstWall()
    {
        RaycastHit hit;
        //Different from spheres as we don need the radius anymore we only need the max distance, I used or because we need to check multiple sides to wallrun
        return Physics.Raycast(transform.position, transform.TransformDirection(Vector3.left), out hit, 0.6f, wallLayerMask) || Physics.Raycast(transform.position, transform.TransformDirection(Vector3.right), out hit, 0.6f, wallLayerMask);
    }

}
